### ./pom.xml

<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>account-service</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>account-service</name>
    <description>Spring Boot REST Account Service</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>

    <properties>
        <java.version>17</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.6.0</version>
        </dependency>
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
            <version>3.1.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>


### ./src/main/resources/application.properties

spring.datasource.url=jdbc:postgresql://db:5432/accounts
spring.datasource.username=postgres
spring.datasource.password=secret
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
server.port=8081


### ./src/main/java/com/example/bank/AccountServiceApplication.java
package main.java.com.example.bank;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication(scanBasePackages = "com.example.bank")
@EnableJpaRepositories("com.example.bank")
@EntityScan("com.example.bank")
public class AccountServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(AccountServiceApplication.class, args);
    }
}


### ./src/main/java/com/example/bank/AccountService.java
package com.example.bank;

import org.springframework.stereotype.Service;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class AccountService {

  private final AccountRepository accountRepository;

  public AccountService(AccountRepository accountRepository) {
    this.accountRepository = accountRepository;
  }

  public List<AccountDto> getAllAccounts() {
    return accountRepository.findAll().stream()
        .map(AccountDto::fromEntity)
        .collect(Collectors.toList());
  }

  public AccountDto createAccount(AccountDto dto) {
    Account account = new Account();
    account.setOwner(dto.getOwner());
    account.setBalance(dto.getBalance());
    account = accountRepository.save(account);
    return AccountDto.fromEntity(account);
  }

  public void transfer(TransferRequest request) {
    Account from = accountRepository.findById(request.getFromAccountId())
        .orElseThrow(() -> new RuntimeException("Senderkonto nicht gefunden"));
    Account to = accountRepository.findById(request.getToAccountId())
        .orElseThrow(() -> new RuntimeException("Empfängerkonto nicht gefunden"));

    if (from.getBalance() < request.getAmount()) {
      throw new RuntimeException("Nicht genügend Guthaben");
    }

    from.setBalance(from.getBalance() - request.getAmount());
    to.setBalance(to.getBalance() + request.getAmount());

    accountRepository.save(from);
    accountRepository.save(to);
  }
}


### ./src/main/java/com/example/bank/AccountDto.java

package com.example.bank;

public class AccountDto {
    private Long id;
    private String owner;
    private double balance;

    public static AccountDto fromEntity(Account account) {
        AccountDto dto = new AccountDto();
        dto.setId(account.getId());
        dto.setOwner(account.getOwner());
        dto.setBalance(account.getBalance());
        return dto;
    }

    // Getter und Setter
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getOwner() { return owner; }
    public void setOwner(String owner) { this.owner = owner; }

    public double getBalance() { return balance; }
    public void setBalance(double balance) { this.balance = balance; }
}


### ./src/main/java/com/example/bank/TransferRequest.java

package com.example.bank;

public class TransferRequest {
    private Long fromAccountId;
    private Long toAccountId;
    private double amount;

    // Getter und Setter
    public Long getFromAccountId() { return fromAccountId; }
    public void setFromAccountId(Long fromAccountId) { this.fromAccountId = fromAccountId; }

    public Long getToAccountId() { return toAccountId; }
    public void setToAccountId(Long toAccountId) { this.toAccountId = toAccountId; }

    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
}


### ./src/main/java/com/example/bank/Account.java

package com.example.bank;

import jakarta.persistence.*;

@Entity
public class Account {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String owner;
    private double balance;

    // Getter und Setter
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getOwner() { return owner; }
    public void setOwner(String owner) { this.owner = owner; }

    public double getBalance() { return balance; }
    public void setBalance(double balance) { this.balance = balance; }
}


### ./src/main/java/com/example/bank/AccountRepository.java

package com.example.bank;

import org.springframework.data.jpa.repository.JpaRepository;

public interface AccountRepository extends JpaRepository<Account, Long> {}


### ./src/main/java/com/example/bank/AccountController.java

package com.example.bank;

import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/accounts")
@CrossOrigin(origins = "*")
public class AccountController {

    private final AccountService accountService;

    public AccountController(AccountService accountService) {
        this.accountService = accountService;
    }

    @GetMapping
    public List<AccountDto> getAll() {
        return accountService.getAllAccounts();
    }

    @PostMapping
    public AccountDto create(@RequestBody AccountDto dto) {
        return accountService.createAccount(dto);
    }

    @PostMapping("/transfer")
    public void transfer(@RequestBody TransferRequest request) {
        accountService.transfer(request);
    }
}


